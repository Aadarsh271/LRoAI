# A huge mess of different stuff combined together for performance reasons mostly in a form of
# reducing calls of stuff like every_scope_state and every_scope_building to the minimum possible.
lroai_collect_data_for_construction_and_downsizing = {
    if = {
        limit = {
            lroai_is_downsizing_allowed = yes
        }
        set_local_variable = lroai_downsizing_is_allowed
    }
    if = {
        limit = {
            lroai_is_construction_allowed = yes
        }
        set_local_variable = lroai_construction_is_allowed
    }
    
    # Set up variables to calculate incorporated and coastal values
    set_variable = {
        name = lroai_total_coastal_population
        value = 0
    }
    set_variable = {
        name = lroai_incorporated_population
        value = 0
    }
    set_variable = {
        name = lroai_incorporated_coastal_population
        value = 0
    }
    set_variable = {
        name = lroai_incorporated_gdp
        value = 0
    }
    
    # Set up variables to calculate median construction efficiency
    set_local_variable = {
        name = lroai_num_construction_efficiency_values
        value = 0
    }
    
    # Get a whole bunch of different data in every state of the country
    every_scope_state = {
        
        # Calculate total coastal population
        if = {
            limit = {
                is_coastal = yes
            }
            root = {
                change_variable = {
                    name = lroai_total_coastal_population
                    add = prev.state_population
                }
            }
        }

        # Calculate incorporated population
        if = {
            limit = {
                is_incorporated = yes
            }
            root = {
                change_variable = {
                    name = lroai_incorporated_population
                    add = prev.state_population
                }
                change_variable = {
                    name = lroai_incorporated_gdp
                    add = prev.gdp
                }
            }

            # Calculate coastal incorporated population
            if = {
                limit = {
                    is_coastal = yes
                }
                root = {
                    change_variable = {
                        name = lroai_incorporated_coastal_population
                        add = prev.state_population
                    }
                }
            }
        }

        # States that are currently being incorporated are counted as well, but multiplied by % incorporation progress
        else_if = {
            limit = {
                incorporation_progress > 0
            }
            root = {
                change_variable = {
                    name = lroai_incorporated_population
                    add = {
                        value = prev.state_population
                        multiply = prev.incorporation_progress
                    }
                }
                change_variable = {
                    name = lroai_incorporated_gdp
                    add = {
                        value = prev.gdp
                        multiply = prev.incorporation_progress
                    }
                }
            }
            if = {
                limit = {
                    is_coastal = yes
                }
                root = {
                    change_variable = {
                        name = lroai_incorporated_coastal_population
                        add = {
                            value = prev.state_population
                            multiply = prev.incorporation_progress
                        }
                    }
                }
            }
        }

        
        # Base for available workforce is unemployed population, subsistence and excessive buildings are added later
        set_variable = {
            name = lroai_available_workforce
            value = lroai_unemployed_population
        }

        # Calculate Chinese and Indian population of a country for respective AI Power Level game rules
        if = {
            limit = {
                OR = {
                    AND = {
                        exists = sr:region_north_china
                        region = sr:region_north_china
                    }
                    AND = {
                        exists = sr:region_south_china
                        region = sr:region_south_china
                    }
                    AND = {
                        exists = s:STATE_LHASA
                        state_region = s:STATE_LHASA
                    }
                    AND = {
                        exists = s:STATE_NGARI
                        state_region = s:STATE_NGARI
                    }
                    AND = {
                        exists = s:STATE_NORTHERN_MANCHURIA
                        state_region = s:STATE_NORTHERN_MANCHURIA
                    }
                    AND = {
                        exists = s:STATE_OUTER_MANCHURIA
                        state_region = s:STATE_OUTER_MANCHURIA
                    }
                    AND = {
                        exists = s:STATE_SOUTHERN_MANCHURIA
                        state_region = s:STATE_SOUTHERN_MANCHURIA
                    }
                }
            }
            root = {
                lroai_add_to_variable = {
                    name = lroai_chinese_population
                    value = prev.state_population
                }
            }
        }
        else_if = {
            limit = {
                OR = {
                    AND = {
                        exists = sr:region_north_india
                        region = sr:region_north_india
                    }
                    AND = {
                        exists = sr:region_south_india
                        region = sr:region_south_india
                    }
                }
            }
            root = {
                lroai_add_to_variable = {
                    name = lroai_indian_population
                    value = prev.state_population
                }
            }
        }

        # To calculate median construction efficiency a value of the state is added to the list multiple times
        # depending on how big it is, so that small states have much less influence on the median.
        set_local_variable = {
            name = lroai_state_weight_in_construction
            value = {
                value = state_population
                divide = 200000
                floor = yes
                add = 1
            }
        }
        while = {
            limit = {
                local_var:lroai_state_weight_in_construction > 0
            }

            # You can't add same value to a list multiple times, so we add id to it that we'll throw away later
            set_local_variable = {
                name = lroai_state_construction_efficiency
                value = {
                    value = modifier:state_construction_mult
                    add = 1
                    min = define:NEconomy|MIN_CONSTRUCTION_EFFICIENCY
                    multiply = 1000
                    round = yes
                    max = 21460
                    multiply = 100000
                    add = {
                        value = local_var:lroai_num_construction_efficiency_values
                        divide = 100
                    }
                }
            }
            add_to_local_variable_list = {
                name = lroai_construction_efficiency_values
                target = local_var:lroai_state_construction_efficiency
            }
            change_local_variable = {
                name = lroai_num_construction_efficiency_values
                add = 1
            }
            change_local_variable = {
                name = lroai_state_weight_in_construction
                subtract = 1
            }
        }
        
        # Set up state scope variables with government building levels
        set_variable = { # Downsizing only
            name = lroai_building_government_administration_level
            value = 0
        }
        set_variable = { # Downsizing only
            name = lroai_building_university_level
            value = 0
        }
        set_variable = {
            name = lroai_building_construction_sector_level
            value = 0
        }
        # Not needed as of now
        #set_variable = {
        #    name = lroai_railway_level
        #    value = 0
        #}
        set_variable = {
            name = lroai_building_port_level
            value = 0
        }
        set_variable = {
            name = lroai_building_barracks_level
            value = 0
        }
        set_variable = {
            name = lroai_building_naval_base_level
            value = 0
        }
        set_variable = {
            name = lroai_building_conscription_center_occupancy
            value = 0
        }
    }

    # Get median value from the list of construction efficiency values
    if = {
        limit = {
            local_var:lroai_num_construction_efficiency_values > 0
        }
        set_local_variable = {
            name = lroai_num_construction_efficiency_values
            value = {
                value = local_var:lroai_num_construction_efficiency_values
                divide = 2
                floor = yes
            }
        }
        ordered_in_local_list = {
            variable = lroai_construction_efficiency_values
            order_by = this
            position = local_var:lroai_num_construction_efficiency_values
            root = {
                set_variable = {
                    name = lroai_median_construction_efficiency
                    value = {
                        value = prev
                        divide = 100000
                        floor = yes
                        divide = 100
                    }
                }
            }
        }
    }
    remove_local_variable = lroai_num_construction_efficiency_values
    clear_local_variable_list = lroai_construction_efficiency_values
    
    # Set up country scope variables with government building levels
    set_variable = {
        name = lroai_building_government_administration_total
        value = 0
    }
    set_variable = {
        name = lroai_building_university_total
        value = 0
    }
    set_variable = {
        name = lroai_building_port_total
        value = 0
    }
    # Counted in weekly loop
    # set_variable = {
    #     name = lroai_building_barracks_total
    #     value = 0
    # }
    set_variable = {
        name = lroai_building_naval_base_total
        value = 0
    }
    
    # Get various data for every building in the country
    every_scope_building = {
        limit = {
            level > 0 # Active buildings only
        }

        # Add occupation of subsistence building to available workforce in its state
        if = {
            limit = {
                is_subsistence_building = yes
            }
            state = {
                change_variable = {
                    name = lroai_available_workforce
                    add = {
                        value = prev.lroai_occupied_levels
                        if = {
                            limit = {
                                prev = {
                                    is_building_type = building_subsistence_rice_paddies
                                }
                            }
                            multiply = 10000 # Rice paddies have ~10k workers per level
                        }
                        else = {
                            multiply = 5000 # All the other ones have ~5k workers per level
                        }
                        multiply = 0.90 # But not all of them are peasants
                    }
                }
            }
        }

        # Government administration
        else_if = {
            limit = {
                is_building_type = building_government_administration
            }
            root = {

                # Renew cooldown if there's government administration under construction
                if = {
                    limit = {
                        has_variable = lroai_building_government_administration_cooldown
                        prev = {
                            is_under_construction = yes
                        }
                    }
                    lroai_renew_variable = {
                        name = lroai_building_government_administration_cooldown
                        days = lroai_days_in_building_cooldown
                    }
                }

                # Add level to country scope variable
                change_variable = {
                    name = lroai_building_government_administration_total
                    add = prev.level
                }
            }

            # Add level to state scope variable
            state = {
                change_variable = {
                    name = lroai_building_government_administration_level
                    add = prev.level
                }
            }
        }

        # University
        else_if = {
            limit = {
                is_building_type = building_university
            }
            root = {
                if = {
                    limit = {
                        has_variable = lroai_building_university_cooldown
                        prev = {
                            is_under_construction = yes
                        }
                    }
                    lroai_renew_variable = {
                        name = lroai_building_university_cooldown
                        days = lroai_days_in_building_cooldown
                    }
                }
                change_variable = {
                    name = lroai_building_university_total
                    add = prev.level
                }
            }
            state = {
                change_variable = {
                    name = lroai_building_university_level
                    add = prev.level
                }
            }
        }

        # Construction sector
        else_if = {
            limit = {
                is_building_type = building_construction_sector
            }
            root = {
                if = {
                    limit = {
                        has_variable = lroai_building_construction_sector_cooldown
                        prev = {
                            is_under_construction = yes
                        }
                    }
                    lroai_renew_variable = {
                        name = lroai_building_construction_sector_cooldown
                        days = lroai_days_in_building_cooldown
                    }
                }
                # Counted in weekly loop
                # change_variable = {
                    # name = lroai_building_construction_sector_total
                    # add = prev.level
                # }
            }
            state = {
                change_variable = {
                    name = lroai_building_construction_sector_level
                    add = prev.level
                }
            }
        }

        # Railway
        else_if = {
            limit = {
                is_building_type = building_railway
            }
            # Nothing as of now
        }

        # Port
        else_if = {
            limit = {
                is_building_type = building_port
            }
            root = {
                if = {
                    limit = {
                        has_variable = lroai_building_port_cooldown
                        prev = {
                            is_under_construction = yes
                        }
                    }
                    lroai_renew_variable = {
                        name = lroai_building_port_cooldown
                        days = lroai_days_in_building_cooldown
                    }
                }
                change_variable = {
                    name = lroai_building_port_total
                    add = prev.level
                }
            }
            state = {
                change_variable = {
                    name = lroai_building_port_level
                    add = prev.level
                }
            }
        }

        # Naval base
        else_if = {
            limit = {
                is_building_type = building_naval_base
            }
            root = {
                if = {
                    limit = {
                        has_variable = lroai_building_naval_base_cooldown
                        prev = {
                            is_under_construction = yes
                        }
                    }
                    lroai_renew_variable = {
                        name = lroai_building_naval_base_cooldown
                        days = lroai_days_in_building_cooldown
                    }
                }
                change_variable = {
                    name = lroai_building_naval_base_total
                    add = prev.level
                }
            }
            state = {
                change_variable = {
                    name = lroai_building_naval_base_level
                    add = prev.level
                }
            }
        }

        # Barracks
        else_if = {
            limit = {
                is_building_type = building_barracks
            }
            root = {
                if = {
                    limit = {
                        has_variable = lroai_building_barracks_cooldown
                        prev = {
                            is_under_construction = yes
                        }
                    }
                    lroai_renew_variable = {
                        name = lroai_building_barracks_cooldown
                        days = lroai_days_in_building_cooldown
                    }
                }
                # Counted in weekly loop
                # change_variable = {
                    # name = lroai_building_barracks_total
                    # add = prev.level
                # }
            }
            state = {
                change_variable = {
                    name = lroai_building_barracks_level
                    add = prev.level
                }
            }
        }

        # Conscription center
        else_if = {
            limit = {
                is_building_type = building_conscription_center
            }
            state = {
                change_variable = {
                    name = lroai_building_conscription_center_occupancy
                    add = prev.occupancy
                }
            }
        }
    }
    
    # Set up variables to calculate unutilized workforce ratio
    set_variable = {
        name = lroai_unutilized_workforce_percent
        value = 0
    }
    set_local_variable = {
        name = lroai_potential_workforce
        value = 0
    }

    # For every state add available workforce to unutilized and working adult population to potential
    every_scope_state = {
        root = {
            change_variable = {
                name = lroai_unutilized_workforce_percent
                add = prev.lroai_available_workforce
            }
            change_local_variable = {
                name = lroai_potential_workforce
                add = {
                    value = prev.state_population
                    multiply = {
                        value = define:NPops|WORKING_ADULT_RATIO_BASE
                        add = prev.modifier:state_working_adult_ratio_add
                        multiply = 0.90
                    }
                }
            }
        }
    }
    
    # Set up variables to calculate unutilized workforce ratio
    set_variable = {
        name = lroai_unutilized_workforce
        value = 0
    }
    every_scope_state = {
        root = {
            change_variable = {
                name = lroai_unutilized_workforce
                add = {
                    value = prev.state_population
                    multiply = prev.state_unemployment_rate
                }
            }
        }
    }
    every_scope_building = {
        limit = {
            level > 0			# Active buildings only
        }
        # Add occupation of subsistence building to available workforce in its state
        if = {
            limit = {
                is_subsistence_building = yes
            }
            root = {
                change_variable = {
                    name = lroai_unutilized_workforce
                    add = {
                        value = prev.lroai_occupied_levels
                        if = {
                            limit = {
                                prev = {
                                    is_building_type = building_subsistence_rice_paddies
                                }
                            }
                            multiply = 9750
                        }
                        else = {
                            multiply = 4750
                        }
                    }
                }
            }
        }
    }
    
    # Calculate unutilized workforce percent
    set_variable = {
        name = lroai_unutilized_workforce_percent
        value = {
            value = var:lroai_unutilized_workforce_percent
            divide = {
                value = local_var:lroai_potential_workforce
                min = 1
            }
            min = 0
            max = 1
        }
    }
    remove_local_variable = lroai_potential_workforce
    
    # Recheck if we actually should construct new buildings with all the new data.
    # There's some good reason for this that I can't recall now.
    if = {
        limit = {
            has_local_variable = lroai_construction_is_allowed
            lroai_free_construction_points <= 0
        }
        remove_local_variable = lroai_construction_is_allowed
    }
    
    # Set up variables for median productivity and profitability
    set_variable = {
        name = lroai_median_building_productivity
        value = 0
    }
    set_variable = {
        name = lroai_median_building_profitability
        value = 0
    }
    
    # Calculate median productivity and profitability
    if = {

        # But only if we have something else allowed other than critical construction and government downsizing
        limit = {
            OR = {
                AND = {
                    has_local_variable = lroai_construction_is_allowed
                    lroai_is_regular_construction_allowed = yes
                }
                lroai_is_production_downsizing_allowed = yes
            }
        }
        
        # Set variables to track lists of values
        set_local_variable = {
            name = lroai_num_productivity_values
            value = 0
        }
        set_local_variable = {
            name = lroai_num_profitability_values
            value = 0
        }
        
        # Add positive values of production building to lists. Non-positive productivity and profitability are ignored,
        # as these medians are used only to evaluate if a new building is worthy of being constructed, if it will be on
        # par and competitive in general economy of a country, so we want to compare it only against other productive
        # buildings, thus non-positive productivity and profitability values are excluded from median calculations.
        every_scope_building = {
            limit = {
                lroai_occupied_levels > 0
                is_subsistence_building = no
                is_government_funded = no
                NOR = {
                    is_building_group = bg_trade
                    is_building_group = bg_service
                    is_building_group = bg_monuments
                    is_building_group = bg_monuments_hidden
                }
            }
            
            # Productivity
            if = {
                limit = {
                    earnings > 0
                }
                root = {

                    # You can't add same value to a list multiple times, so we add id to it that we'll throw away later
                    set_local_variable = {
                        name = lroai_formatted_productivity
                        value = {
                            value = prev.earnings
                            multiply = 100
                            floor = yes
                            max = 99999
                            multiply = 10000
                            add = {
                                value = local_var:lroai_num_productivity_values
                                divide = 100
                            }
                        }
                    }
                    
                    # Productivity value of a building is added to the list once for every X levels of this buildings,
                    # as we actually want to get median productivity of building level rather than entire building, but
                    # it would be a bit too expensive, thus we use some divisor that doesn't affect results too much.
                    set_local_variable = {
                        name = lroai_num_times_to_add_value_to_list
                        value = {
                            value = prev.lroai_occupied_levels
                            divide = 4
                        }
                    }
                    while = {
                        limit = {
                            local_var:lroai_num_times_to_add_value_to_list > 0
                        }
                        add_to_variable_list = {
                            name = lroai_productivity_values
                            target = local_var:lroai_formatted_productivity
                        }
                        change_local_variable = {
                            name = lroai_formatted_productivity
                            add = 0.01
                        }
                        change_local_variable = {
                            name = lroai_num_productivity_values
                            add = 1
                        }
                        change_local_variable = {
                            name = lroai_num_times_to_add_value_to_list
                            subtract = 1
                        }
                    }
                    remove_local_variable = lroai_formatted_productivity
                    remove_local_variable = lroai_num_times_to_add_value_to_list
                }
                
                # Profitability
                if = {
                    limit = {
                        weekly_profit > 0
                    }
                    root = {

                        # For profitability we don't need any fancy transformations, just old good get value from
                        # a scope using a trigger, thus we'll just add a building itself to the list to do it later.
                        add_to_variable_list = {
                            name = lroai_profitability_values
                            target = prev
                        }
                        change_local_variable = {
                            name = lroai_num_profitability_values
                            add = 1
                        }
                    }
                }
            }
        }
        
        # Find median productivity
        if = {
            limit = {
                local_var:lroai_num_productivity_values > 0
            }
            set_local_variable = {
                name = lroai_num_productivity_values
                value = {
                    value = local_var:lroai_num_productivity_values
                    divide = 2
                    floor = yes
                }
            }
            ordered_in_list = {
                variable = lroai_productivity_values
                order_by = this
                position = local_var:lroai_num_productivity_values
                root = {
                    set_variable = {
                        name = lroai_median_building_productivity
                        value = {
                            value = prev
                            divide = 10000
                            floor = yes
                            divide = 100
                        }
                    }
                }
            }
        }
        clear_variable_list = lroai_productivity_values
        remove_local_variable = lroai_num_productivity_values
        
        # Find median profitability
        if = {
            limit = {
                local_var:lroai_num_profitability_values > 0
            }
            set_local_variable = {
                name = lroai_num_profitability_values
                value = {
                    value = local_var:lroai_num_profitability_values
                    divide = 2
                    floor = yes
                }
            }
            ordered_in_list = {
                variable = lroai_profitability_values
                order_by = lroai_profit_per_occupied_level
                position = local_var:lroai_num_profitability_values
                root = {
                    set_variable = {
                        name = lroai_median_building_profitability
                        value = prev.lroai_profit_per_occupied_level
                    }
                }
            }
        }
        clear_variable_list = lroai_profitability_values
        remove_local_variable = lroai_num_profitability_values
    }
    
    # Collect building data type by type, collected data depends on what actions are allowed for performance reasons
    if = {
        limit = {
            has_local_variable = lroai_construction_is_allowed
            lroai_is_production_downsizing_allowed = yes
        }
        lroai_perform_for_every_building_type = {
            effect = 1 # lroai_collect_data_for_all_buildings_of_type
        }
        set_variable = {
            name = lroai_iterations_since_production_downsizing
            value = 0
        }
    }
    else_if = {
        limit = {
            has_local_variable = lroai_construction_is_allowed
        }
        lroai_perform_for_every_building_type = {
            effect = 2 # lroai_collect_data_except_workforce_for_all_buildings_of_type
        }
    }
    else_if = {
        limit = {
            lroai_is_production_downsizing_allowed = yes
        }
        lroai_perform_for_every_building_type = {
            effect = 3 # lroai_collect_only_workforce_data_for_all_buildings_of_type
        }
        set_variable = {
            name = lroai_iterations_since_production_downsizing
            value = 0
        }
    }
    
    # Collect states that meet requirements of being suitable for construction
    every_scope_state = {
        limit = {
            lroai_has_enough_infrastructure = yes
            lroai_has_enough_workforce = yes
        }
        root = {
            add_to_variable_list = {
                name = lroai_states_suitable_for_construction
                target = prev
            }
        }
    }
    remove_local_variable = lroai_downsizing_is_allowed
    remove_local_variable = lroai_construction_is_allowed
}

# ---------------------------------------------------------------------------------------------------------------------
# Array variable lroai_building_type_X_collected_data is widely used below, where X is id of building type in question.
# Search for "Cell distribution of lroai_building_type_X_collected_data array variable" in lroai_preparation_values.txt
# ---------------------------------------------------------------------------------------------------------------------

# If workforce is true, calculate shortages, profitability, productivity and check if building is excessive
lroai_collect_data_for_all_buildings_of_type = {
    if = {
        limit = {
            $workforce$ = 1
        }

        # Set up building counter variable
        set_local_variable = {
            name = lroai_num_buildings_of_current_type
            value = 0
        }

        # Get every building of the type in the country
        every_scope_building = {
            limit = {
                is_building_type = $key$
            }

            # Remove level 0 buildings that are not under construction as it's just a junk that happens to survive
            if = {
                limit = {
                    level <= 0
                    is_under_construction = no
                }
                state = {
                    remove_building = $key$
                }
            }
            else = {

                # Add ongoing constructions to counter
                lroai_add_ongoing_constructions_to_counter = {
                    id = $id$
                    counter = $counter$
                }

                # Further data collection makes sense only for active buildings
                if = {
                    limit = {
                        level > 0
                    }

                    # Check if the building uses certain important production methods
                    lroai_check_production_methods_of_building_type = {
                        id = $id$
                    }

                    # Further data collection makes sense only for buildings with workers and reasonable market access
                    if = {
                        limit = {
                            lroai_occupied_levels > 0
                            state.market_access >= 0.80
                        }

                        # Check if the building has input good shortages
                        lroai_collect_total_and_shortage_building_levels = {
                            id = $id$
                        }

                        # Add the building to the list of current type to perform country scope calculations later
                        root = {
                            change_local_variable = {
                                name = lroai_num_buildings_of_current_type
                                add = 1
                            }
                            add_to_variable_list = {
                                name = lroai_buildings_of_current_type
                                target = prev
                            }
                        }
                    }

                    # Check if building is not productive but has a lot of workers or if it is nearly empty
                    lroai_check_if_building_is_excessive_or_abandoned = {
                        id = $id$
                    }
                }
            }
        }

        # Country scope calculations for this building type
        if = {
            limit = {
                has_variable = lroai_building_type_$id$_collected_data
            }

            # Process shortage data in array variable of this building type to form its final cell distribution
            lroai_calculate_percent_of_building_type_levels_without_shortage = {
                id = $id$
            }

            # Find median productivity and profitability of this building type using country scope list
            lroai_find_building_type_median_productivity_and_profitability = {
                id = $id$
            }
        }
        remove_local_variable = lroai_num_buildings_of_current_type
        clear_variable_list = lroai_buildings_of_current_type
    }

    # If workforce is false, collect all the data except the one related to it
    else = {
        lroai_collect_data_except_workforce_for_all_buildings_of_type = {
            key = $key$
            id = $id$
            counter = $counter$
        }
    }
}

# Сalculate shortages, profitability and productivity
lroai_collect_data_except_workforce_for_all_buildings_of_type = {
    
    # For government building we don't need anything except shortages
    if = {
        limit = {
            $id$ < 7 # Government buildings
            NOT = {
                $id$ = 4 # Except railways as they are productive
            }
        }

        # For some building shortages are already calculated in weekly loop, so we don't need to redo it
        if = {
            limit = {
                NOR = {
                    $id$ = 1 # Government administration
                    $id$ = 3 # Construction sector
                    $id$ = 5 # Port
                }
            }

            # Get every building of the type in the country
            every_scope_building = {
                limit = {
                    is_building_type = $key$
                }

                # Remove level 0 buildings that are not under construction as it's just a junk that happens to survive
                if = {
                    limit = {
                        level <= 0
                        is_under_construction = no
                    }
                    state = {
                        remove_building = $key$
                    }
                }
                else = {

                    # Add ongoing constructions to counter
                    lroai_add_ongoing_constructions_to_counter = {
                        id = $id$
                        counter = $counter$
                    }

                    # Further data collection makes sense only for buildings with workers and reasonable market access
                    if = {
                        limit = {
                            lroai_occupied_levels > 0
                            state.market_access >= 0.80
                        }

                        # Check if the building has input good shortages
                        lroai_collect_total_and_shortage_building_levels = {
                            id = $id$
                        }
                    }
                }
            }

            # Country scope calculations for this building type
            if = {
                limit = {
                    has_variable = lroai_building_type_$id$_collected_data
                }

                # Process shortage data in array variable of this building type to form its final cell distribution
                lroai_calculate_percent_of_building_type_levels_without_shortage = {
                    id = $id$
                }
            }
        }
    }

    # Production buildings
    else = {

        # Set up building counter variable
        set_local_variable = {
            name = lroai_num_buildings_of_current_type
            value = 0
        }

        # Get every building of the type in the country
        every_scope_building = {
            limit = {
                is_building_type = $key$
            }

            # Remove level 0 buildings that are not under construction as it's just a junk that happens to survive
            if = {
                limit = {
                    level <= 0
                    is_under_construction = no
                }
                state = {
                    remove_building = $key$
                }
            }
            else = {

                # Add ongoing constructions to counter
                lroai_add_ongoing_constructions_to_counter = {
                    id = $id$
                    counter = $counter$
                }

                # Further data collection makes sense only for active buildings
                if = {
                    limit = {
                        level > 0
                    }

                    # Check if the building uses certain important production methods
                    lroai_check_production_methods_of_building_type = {
                        id = $id$
                    }

                    # Further data collection makes sense only for buildings with workers and reasonable market access
                    if = {
                        limit = {
                            lroai_occupied_levels > 0
                            state.market_access >= 0.80
                        }

                        # Check if the building has input good shortages
                        lroai_collect_total_and_shortage_building_levels = {
                            id = $id$
                        }

                        # Add the building to the list of current type to perform country scope calculations later
                        root = {
                            change_local_variable = {
                                name = lroai_num_buildings_of_current_type
                                add = 1
                            }
                            add_to_variable_list = {
                                name = lroai_buildings_of_current_type
                                target = prev
                            }
                        }
                    }
                }
            }
        }

        # Country scope calculations for this building type
        if = {
            limit = {
                has_variable = lroai_building_type_$id$_collected_data
            }

            # Process shortage data in array variable of this building type to form its final cell distribution
            lroai_calculate_percent_of_building_type_levels_without_shortage = {
                id = $id$
            }

            # Find median productivity and profitability of this building type using country scope list
            lroai_find_building_type_median_productivity_and_profitability = {
                id = $id$
            }
        }
        remove_local_variable = lroai_num_buildings_of_current_type
        clear_variable_list = lroai_buildings_of_current_type
    }
}

# Check if building is excessive or abandoned
lroai_collect_only_workforce_data_for_all_buildings_of_type = {

    # But only is workforce is true, of course
    if = {
        limit = {
            $workforce$ = 1
        }

        # Get every building of the type in the country
        every_scope_building = {
            limit = {
                is_building_type = $key$
            }

            # Remove level 0 buildings that are not under construction as it's just a junk that happens to survive
            if = {
                limit = {
                    level <= 0
                    is_under_construction = no
                }
                state = {
                    remove_building = $key$
                }
            }

            # This data collection makes sense only for active buildings
            else_if = {
                limit = {
                    level > 0
                }

                # Check if building is not productive but has a lot of workers or if it is nearly empty
                lroai_check_if_building_is_excessive_or_abandoned = {
                    id = $id$
                }
            }
        }
    }
}

# Add the number of levels currently under construction to counter in array variable of the building type
lroai_add_ongoing_constructions_to_counter = {

    # Only if the building is actually under construction
    if = {
        limit = {
            is_under_construction = yes
        }

        # We can't check number of levels under construction natively, so the script includes custom tracking solution.
        # Get count from array variables of the required building type in ongoing construction list if they exist.
        state = {
            every_in_list = {
                variable = lroai_ongoing_constructions
                limit = {
                    lroai_current_ongoing_constructions_element_1 = $id$
                }
                lroai_add_to_local_variable = {
                    name = lroai_total_constructions
                    value = lroai_current_ongoing_constructions_element_4
                }
            }
        }

        # If we found something in the list of ongoing constructions, add it to counter, otherwise just add 1
        root = {
            if = {
                limit = {
                    has_local_variable = lroai_total_constructions
                }
                lroai_add_to_building_type_counter = {
                    counter = $counter$
                    value = local_var:lroai_total_constructions
                }
                remove_local_variable = lroai_total_constructions
            }
            else = {
                lroai_add_to_building_type_counter = {
                    counter = $counter$
                    value = 1
                }
            }
        }
    }
}

# Collect total number of building type levels and how much of them have shortages to get % shortage levels later
lroai_collect_total_and_shortage_building_levels = {
    root = {

        # Create array variable if it doesn't exist
        if = {
            limit = {
                NOT = {
                    has_variable = lroai_building_type_$id$_collected_data
                }
            }
            set_variable = {
                name = lroai_building_type_$id$_collected_data
                value = 0
            }
        }

        # Check if there's some room in array variable for more data
        if = {
            limit = {
                lroai_building_type_$id$_collected_data_3 < lroai_building_data_overflow_protection
            }

            # Add building levels to cell with total levels of building type
            change_variable = {
                name = lroai_building_type_$id$_collected_data
                add = {
                    value = prev.lroai_occupied_levels
                    round = yes
                    multiply = 100
                }
            }

            # If the building has shortage, add building levels to cell with shortage levels of building type
            if = {
                limit = {
                    prev = {
                        building_has_goods_shortage = yes
                    }
                }
                change_variable = {
                    name = lroai_building_type_$id$_collected_data
                    add = {
                        value = prev.lroai_occupied_levels
                        round = yes
                        divide = 100
                    }
                }
            }
        }
    }
}

# Transform total and shortage building type levels data into single cell containing percent of levels without shortage.
# "Without shortage" is used instead of "shortage" because otherwise we would have a cell with 0 value being desired,
# which sounds like a bad idea when all the other cells follow the paradigm of "big number good, small number bad."
lroai_calculate_percent_of_building_type_levels_without_shortage = {
    set_variable = {
        name = lroai_building_type_$id$_collected_data
        value = {
            value = 1
            subtract = {

                # Number of shortage levels
                value = var:lroai_building_type_$id$_collected_data
                subtract = {
                    value = var:lroai_building_type_$id$_collected_data
                    divide = 100
                    floor = yes
                    multiply = 100
                }
                multiply = 100
                floor = yes

                # Divided by number of total levels
                divide = {
                    value = var:lroai_building_type_$id$_collected_data
                    subtract = {
                        value = var:lroai_building_type_$id$_collected_data
                        divide = 1000000
                        floor = yes
                        multiply = 1000000
                    }
                    divide = 100
                    floor = yes
                    min = 1
                }
            }
            min = 0.00
            max = 0.99

            # Preserve data outside of cells used for shortage calculations
            add = {
                value = var:lroai_building_type_$id$_collected_data
                divide = 1000000
                floor = yes
                multiply = 1000000
            }
        }
    }
}

# While country scope medians used only positive values and added them multiple times based on building levels, these
# calculations has none of it due to actual real world data being required here and performance reasons respectively.
lroai_find_building_type_median_productivity_and_profitability = {
    if = {
        limit = {
            local_var:lroai_num_buildings_of_current_type > 0
        }
        set_local_variable = {
            name = lroai_num_buildings_of_current_type
            value = {
                value = local_var:lroai_num_buildings_of_current_type
                divide = 2
                floor = yes
            }
        }

        # Profitability
        ordered_in_list = {
            variable = lroai_buildings_of_current_type
            order_by = lroai_profit_per_occupied_level
            position = local_var:lroai_num_buildings_of_current_type
            root = {
                change_variable = {
                    name = lroai_building_type_$id$_collected_data
                    add = {
                        value = prev.lroai_profit_per_occupied_level
                        divide = {
                            value = lroai_median_building_profitability
                            min = 0.01
                        }
                        multiply = 100
                        floor = yes
                        min = 0
                        max = 99
                    }
                }
            }
        }

        # Productivity (with economy of scale removed!)
        ordered_in_list = {
            variable = lroai_buildings_of_current_type
            order_by = lroai_productivity_without_scaling
            position = local_var:lroai_num_buildings_of_current_type
            root = {
                change_variable = {
                    name = lroai_building_type_$id$_collected_data
                    add = {
                        value = prev.lroai_productivity_without_scaling
                        multiply = 10
                        floor = yes
                        max = 9998
                        multiply = 100
                    }
                }
            }
        }
    }

    # If no buildings of this type were added to the list, then we don't have the data, thus no restrictions
    else = {
        change_variable = {
            name = lroai_building_type_$id$_collected_data
            add = 9999999 # Cells 2, 3, 4
        }
    }
}

# Excessive means high occupancy but is not productive, abandoned means low occupancy and can't hire more
lroai_check_if_building_is_excessive_or_abandoned = {
    state = {

        # Don't check it in states with active conscription, as it affects things a lot
        if = {
            limit = {
                OR = {
                    NOT = {
                        has_variable = lroai_building_conscription_center_occupancy
                    }
                    var:lroai_building_conscription_center_occupancy = 0
                }
            }

            # First check if building is abandoned
            if = {
                limit = {
                    prev = {
                        lroai_building_is_abandoned = yes
                    }
                }

                # Only start tracking abandonement with state variable if there's none of it yet
                if = {
                    limit = {
                        NOT = {
                            has_variable = lroai_building_type_$id$_is_abandoned
                        }
                    }
                    set_variable = {
                        name = lroai_building_type_$id$_is_abandoned
                        value = prev.lroai_occupied_levels
                        days = lroai_days_to_keep_abandoned_variable
                    }
                }

                # Otherwise check current situation against previous record
                else = {

                    # Save tracked iterations into local variable
                    set_local_variable = {
                        name = lroai_iterations_of_observation
                        value = {
                            value = var:lroai_building_type_$id$_is_abandoned
                            divide = 10000000
                            floor = yes
                        }
                    }

                    # Set occupancy requirements for the building to escape abandoned status due to hiring people
                    set_local_variable = {
                        name = lroai_previous_occupancy_with_margin
                        value = {

                            # Previous occupancy
                            value = var:lroai_building_type_$id$_is_abandoned
                            subtract = {
                                value = local_var:lroai_iterations_of_observation
                                multiply = 10000000
                            }

                            # Margin
                            add = {
                                value = prev.level
                                multiply = define:NEconomy|HIRING_RATE
                                multiply = {
                                    value = 0.50
                                    multiply = {
                                        value = root.var:lroai_iterations_since_production_downsizing
                                        add = 1
                                    }
                                    add = 1
                                }
                            }
                        }
                    }

                    # If current occupancy is not higher than threshold, continue abandonment tracking
                    if = {
                        limit = {
                            local_var:lroai_previous_occupancy_with_margin >= prev.lroai_occupied_levels
                        }

                        # Add to observation iterations
                        set_local_variable = {
                            name = lroai_iterations_of_observation
                            value = {
                                value = local_var:lroai_iterations_of_observation
                                add = root.var:lroai_iterations_since_production_downsizing
                                max = 6
                            }
                        }

                        # Re-set the variable
                        set_variable = {
                            name = lroai_building_type_$id$_is_abandoned
                            value = {
                                value = prev.lroai_occupied_levels
                                add = {
                                    value = local_var:lroai_iterations_of_observation
                                    multiply = 10000000
                                }
                            }
                            days = lroai_days_to_keep_abandoned_variable
                        }

                        # The building is proved to be consistently abandoned, so we mark its building type with a
                        # country scope variable to show that there are buildings of this type that we need to downsize.
                        if = {
                            limit = {
                                local_var:lroai_iterations_of_observation >= 6
                            }
                            root = {
                                set_variable = {
                                    name = lroai_building_type_$id$_is_abandoned
                                    value = yes
                                    days = lroai_days_to_keep_short_variables
                                }
                            }
                        }
                    }

                    # If current occupancy is higher than threshold, we no longer think that the building is abandoned
                    else = {
                        remove_variable = lroai_building_type_$id$_is_abandoned
                    }

                    # Garbage collection
                    remove_local_variable = lroai_iterations_of_observation
                    remove_local_variable = lroai_previous_occupancy_with_margin
                }
            }

            # If building is not abandoned, but there is tracking variable, remove it
            else_if = {
                limit = {
                    has_variable = lroai_building_type_$id$_is_abandoned
                }
                remove_variable = lroai_building_type_$id$_is_abandoned
            }

            # If the building is not abandoned, check if it is excessive
            if = {
                limit = {
                    NOT = {
                        has_variable = lroai_building_type_$id$_is_abandoned
                    }
                    prev = {
                        lroai_building_is_excessive = yes
                    }
                }

                # If it is, add a fraction of its occupancy to available workforce of a state, so the script will
                # construct new productive buildings there to replace ineffective excessive buildings with them.
                change_variable = {
                    name = lroai_available_workforce
                    add = {
                        value = prev.lroai_occupied_levels
                        multiply = 5000
                        multiply = 0.25
                    }
                }
            }
        }
    }
}

# Collect coastlines of market capital and outer lands
lroai_collect_coastlines_of_market_capital_and_overseas_lands = {
    if = {
        limit = {
            any_scope_state = {
                is_coastal = yes
            }
        }

        # Only market owners can have market capital coastlines, for junior partners everything is overseas lands
        if = {
            limit = {
                market.owner = root
            }

            # Set up market capital as input state
            market_capital = {
                root = {
                    add_to_variable_list = {
                        name = lroai_current_ring_of_states
                        target = prev
                    }
                }
            }

            # Get list of all states connected to market capital by land
            lroai_collect_states_of_same_owner_connected_by_land = yes

            # Out of connected states take all the coastal ones to form market capital coastline list
            every_in_list = {
                variable = lroai_states_connected_to_input
                if = {
                    limit = {
                        is_coastal = yes
                    }
                    root = {
                        add_to_variable_list = {
                            name = lroai_states_of_market_capital_coastline
                            target = prev
                        }
                    }
                }
            }

            # Set up variable with number of states of market capital coastline which is needed for port conditions
            set_variable = {
                name = lroai_num_states_of_market_capital_coastline
                value = 0
            }
            every_in_list = {
                variable = lroai_states_of_market_capital_coastline
                root = {
                    change_variable = {
                        name = lroai_num_states_of_market_capital_coastline
                        add = 1
                    }
                }
            }

            # Garbage collection
            clear_variable_list = lroai_states_connected_to_input
        }

        # Every coastal state that does not belong to market capital coastline is a part of overseas lands
        every_scope_state = {
            limit = {
                is_coastal = yes
                root = {
                    NOT = {
                        lroai_is_target_in_variable_list = {
                            name = lroai_states_of_market_capital_coastline
                            target = prev
                        }
                    }
                }
            }
            root = {
                add_to_variable_list = {
                    name = lroai_coastline_of_overseas_lands
                    target = prev
                }

                # Create a list of states in overseas lands where it is safe to delete ports, meaning states that are
                # connected by land to some other state with port and thus they won't lose market access if their ports
                # will be deleted, which is absolutely critical to track for decision making regarding port downsizing.
                if = {
                    limit = {
                        prev.var:lroai_building_port_level > 0
                        NOT = {
                            lroai_is_target_in_variable_list = {
                                name = lroai_safe_to_delete_ports_in_overseas_lands
                                target = prev
                            }
                        }
                    }

                    # Set up a state with port as input
                    add_to_variable_list = {
                        name = lroai_current_ring_of_states
                        target = prev
                    }

                    # Get list of all states connected to this state by land
                    lroai_collect_states_of_same_owner_connected_by_land = yes

                    # If there are some states with ports in output list, all of them are considered safe to delete.
                    # Note that downsizing script only deletes one port at time; if this will be changed, you'll need
                    # to add additional tracking to avoid deleting multiple ports that rely on each other to be safe.
                    if = {
                        limit = {
                            any_in_list = {
                                variable = lroai_states_connected_to_input
                                var:lroai_building_port_level > 0
                                count > 1
                            }
                        }
                        every_in_list = {
                            variable = lroai_states_connected_to_input
                            if = {
                                limit = {
                                    var:lroai_building_port_level > 0
                                }
                                root = {
                                    add_to_variable_list = {
                                        name = lroai_safe_to_delete_ports_in_overseas_lands
                                        target = prev
                                    }
                                }
                            }
                        }
                    }

                    # Garbage collection
                    clear_variable_list = lroai_states_connected_to_input
                }
            }
        }
    }
}

# Gets any amount of states as input in form of lroai_current_ring_of_states variable list, creates an output variable
# list named lroai_states_connected_to_input that contains all the states of the same owner that are connected by land
# through other states of this same owner to any of states from input. Don't forget about garbage collection of output.
lroai_collect_states_of_same_owner_connected_by_land = {
    while = {
        limit = {
            lroai_has_variable_list = {
                name = lroai_current_ring_of_states
            }
        }
        random_in_list = {
            variable = lroai_current_ring_of_states
            root = {
                add_to_variable_list = {
                    name = lroai_states_connected_to_input
                    target = prev
                }
            }
            every_neighbouring_state = {
                limit = {
                    owner = root
                    root = {
                        NOR = {
                            lroai_is_target_in_variable_list = {
                                name = lroai_states_connected_to_input
                                target = prev
                            }
                            lroai_is_target_in_variable_list = {
                                name = lroai_current_ring_of_states
                                target = prev
                            }
                            lroai_is_target_in_variable_list = {
                                name = lroai_waiting_ring_of_states
                                target = prev
                            }
                        }
                    }
                }
                root = {
                    add_to_variable_list = {
                        name = lroai_waiting_ring_of_states
                        target = prev
                    }
                }
            }
            root = {
                remove_list_variable = {
                    name = lroai_current_ring_of_states
                    target = prev
                }
                if = {
                    limit = {
                        NOT = {
                            lroai_has_variable_list = {
                                name = lroai_current_ring_of_states
                            }
                        }
                    }
                    if = {
                        limit = {
                            lroai_has_variable_list = {
                                name = lroai_waiting_ring_of_states
                            }
                        }
                        every_in_list = {
                            variable = lroai_waiting_ring_of_states
                            root = {
                                add_to_variable_list = {
                                    name = lroai_current_ring_of_states
                                    target = prev
                                }
                            }
                        }
                        clear_variable_list = lroai_waiting_ring_of_states
                    }
                    else = {
                        clear_variable_list = lroai_current_ring_of_states
                    }
                }
            }
        }
    }
}