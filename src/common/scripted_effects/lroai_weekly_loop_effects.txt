# Effects of weekly loop iterarion
lroai_perform_iteration_of_weekly_loop = {

    # Add a week of progress to elements of lroai_ongoing_constructions
    lroai_add_progress_to_ongoing_constructions = yes

    # Collect expenses data from buildings and perform a bunch of calculations and transformations using it, with
    # total levels, shortages and ongoing constructions also being collected on day 1 of economy cycle iteration.
    lroai_weekly_check_of_building_data = {
        day_1_of_main_loop = $day_1_of_main_loop$
    }

    # Track how many iterations of weekly loop were performed in this main iteration and schedule next if needed
    lroai_count_and_schedule_iterations_of_weekly_loop = {
        day_1_of_main_loop = $day_1_of_main_loop$
    }

    # Calculate per point expenses of construction sectors
    lroai_calculate_building_construction_sector_expenses_per_point = yes

    lroai_track_downsizing_cycle = yes


    # data needed for construction and downsizing
    lroai_collect_data_for_construction_and_downsizing = yes
    lroai_collect_coastlines_of_market_capital_and_overseas_lands = yes

    if = { limit = { $day_1_of_main_loop$ = yes }
        # Change tax level and government wages if needed
        lroai_manage_tax_and_wage_level = yes
        lroai_start_downsizing = yes
    }

    lroai_start_construction = yes

    # Garbage collection
    lroai_clear_weekly_loop_local_variables = yes
}


lroai_track_downsizing_cycle = {
     # Track cycles since last check of data that is used in downsizing of production buildings
    if = {
        limit = {
            OR = {
                NOT = {
                    has_variable = lroai_iterations_since_production_downsizing
                }
                var:lroai_iterations_since_production_downsizing < lroai_max_iterations_since_production_downsizing
            }
        }
        lroai_add_to_variable = {
            name = lroai_iterations_since_production_downsizing
            value = 1
        }
    }
}

lroai_start_downsizing = {

    # Perform downsizing and immediately clear variables that won't be needed in construction
    if = {
        limit = { lroai_is_downsizing_allowed = yes }
        lroai_downsize_excessive_buildings = yes
    }
    lroai_clear_downsizing_variables = yes
}

lroai_start_construction = {
    # Start construction if it is still allowed or clear variables otherwise
    if = {
        limit = {
            lroai_is_construction_allowed = yes
        }
        trigger_event = {
            id = lroai_construction_events.1
            days = 1
        }
    }
}

# Add a week of progress to elements of lroai_ongoing_constructions
lroai_add_progress_to_ongoing_constructions = {
    every_scope_state = {
        limit = {
            lroai_has_variable_list = {
                name = lroai_ongoing_constructions
            }
        }
        save_scope_as = lroai_current_state
        every_in_list = {
            variable = lroai_ongoing_constructions

            # Building is being constructed, subtract construction points from cell 2 until it reaches zero
            if = {
                limit = {
                    lroai_current_ongoing_constructions_element_3 = 1
                    lroai_current_ongoing_constructions_element_2 > 0
                }
                set_local_variable = {
                    name = lroai_modified_current_ongoing_constructions_element
                    value = {
                        value = this
                        subtract = {
                            value = root.modifier:country_max_weekly_construction_progress_add
                            round = yes
                            max = lroai_current_ongoing_constructions_element_2
                            multiply = 100
                        }
                    }
                }
            }

            # Construction is expected to be finished or was finished for sure
            else = {

                # Add weeks to cell 2 until enough of them would pass for the building to reach reasonable occupancy
                set_local_variable = {
                    name = lroai_modified_current_ongoing_constructions_element
                    value = {
                        value = this
                        add = 100
                    }
                }

                # Manage construction status, going from "is under construction" to "expected to be finished" and
                # "was finished for sure". Do it only if weeks are below threshold, otherwise just delete the element.
                if = {
                    limit = {
                        lroai_modified_current_ongoing_constructions_element_2 < 5
                    }
                    
                    # Change status and thus cell 2 from points to weeks after construction ended to roughly track new
                    # levels getting employees. Cell 2 stays at 0 during transition so we hang on an extra week before
                    # claiming construction is done to account for desync between weekly loop and actual weekly tick.
                    if = {
                        limit = {
                            lroai_modified_current_ongoing_constructions_element_3 = 1
                        }
                        change_local_variable = {
                            name = lroai_modified_current_ongoing_constructions_element
                            add = 1000000
                        }
                    }
                    
                    # If we weren't sure before if building was constructed but we see no building of such type under
                    # construction in this state, we swap from "expected to be finished" to "was finished for sure".
                    if = {
                        limit = {
                            lroai_modified_current_ongoing_constructions_element_3 = 2
                            NOT = {
                                scope:lroai_current_state = {
                                    any_scope_building = {
                                        lroai_is_true_for_any_building_type = {
                                            trigger = 1 # is_building_type = $key$
                                        }
                                        is_under_construction = yes
                                    }
                                }
                            }
                        }
                        change_local_variable = {
                            name = lroai_modified_current_ongoing_constructions_element
                            add = 1000000
                        }
                    }
                }

                # If enough weeks have passed, remove the element from the list
                else = {
                    remove_local_variable = lroai_modified_current_ongoing_constructions_element
                }
            }

            # Add the element to a modified version of the list
            scope:lroai_current_state = {
                remove_list_variable = {
                    name = lroai_ongoing_constructions
                    target = prev
                }
                if = {
                    limit = {
                        has_local_variable = lroai_modified_current_ongoing_constructions_element
                    }
                    add_to_variable_list = {
                        name = lroai_modified_ongoing_constructions
                        target = local_var:lroai_modified_current_ongoing_constructions_element
                    }
                    remove_local_variable = lroai_modified_current_ongoing_constructions_element
                }
            }
            
        }

        # Move modified version of the list to a regular one
        clear_variable_list = lroai_ongoing_constructions
        every_in_list = {
            variable = lroai_modified_ongoing_constructions
            scope:lroai_current_state = {
                add_to_variable_list = {
                    name = lroai_ongoing_constructions
                    target = prev
                }
                remove_list_variable = {
                    name = lroai_modified_ongoing_constructions
                    target = prev
                }
            }
        }
        clear_variable_list = lroai_modified_ongoing_constructions

        # Garbage collection
        clear_saved_scope = lroai_current_state
    }
}

# Collect expenses data from buildings and perform a bunch of calculations and transformations using it, with
# total levels, shortages and ongoing constructions also being collected on day 1 of economy cycle iteration.
lroai_weekly_check_of_building_data = {
    

    set_local_variable = {
        name = lroai_building_university_expenses
        value = 0
    }
    set_local_variable = {
        name = lroai_building_construction_sector_expenses
        value = 0
    }
    set_local_variable = {
        name = lroai_building_barracks_expenses
        value = 0
    }
    set_local_variable = {
        name = lroai_building_naval_base_expenses
        value = 0
    }
    set_local_variable = {
        name = lroai_building_conscription_center_expenses
        value = 0
    }

    # Set up variables for country scope building levels
    if = {
        limit = {
            $day_1_of_main_loop$ = yes
        }
        set_variable = {
            name = lroai_building_construction_sector_total
            value = 0
        }
        set_variable = {
            name = lroai_building_barracks_total
            value = 0
        }
        set_variable = {
            name = lroai_building_conscription_center_total
            value = 0
        }
    }
    
    # Collect expenses data from buildings, with total levels, shortages and ongoing constructions also being collected
    # on day 1 of economy cycle iteration for buildings that may be constructed as critical.
    every_scope_building = {

        if = {
            limit = {
                is_building_type = building_university
            }
            change_local_variable = {
                name = lroai_building_university_expenses
                subtract = weekly_profit
            }
        }
        else_if = {
            limit = {
                is_building_type = building_construction_sector
            }
            change_local_variable = {
                name = lroai_building_construction_sector_expenses
                subtract = weekly_profit
            }
            if = {
                limit = {
                    $day_1_of_main_loop$ = yes
                }
                root = {
                    change_variable = {
                        name = lroai_building_construction_sector_total
                        add = prev.level
                    }
                }
                if = {
                    limit = {
                        level > 0
                        state.market_access >= 0.80
                    }
                    lroai_collect_total_and_shortage_building_levels = {
                        id = 3
                    }
                }
                lroai_add_ongoing_constructions_to_counter = {
                    id = 3
                    counter = 3
                }
            }
        }
        else_if = {
            limit = {
                is_building_type = building_railway
            }

            # Railways should always be subsidized
            if = {
                limit = {
                    root = {
                        is_player = no
                    }
                    is_subsidized = no
                }
                set_subsidized = yes
            }
        }
        else_if = {
            limit = {
                is_building_type = building_barracks
            }
            change_local_variable = {
                name = lroai_building_barracks_expenses
                subtract = weekly_profit
            }
            if = {
                limit = {
                    $day_1_of_main_loop$ = yes
                }
                root = {
                    change_variable = {
                        name = lroai_building_barracks_total
                        add = prev.level
                    }
                }
            }
        }
        else_if = {
            limit = {
                is_building_type = building_naval_base
            }
            change_local_variable = {
                name = lroai_building_naval_base_expenses
                subtract = weekly_profit
            }
        }
        else_if = {
            limit = {
                is_building_type = building_conscription_center
            }
            change_local_variable = {
                name = lroai_building_conscription_center_expenses
                subtract = weekly_profit
            }
            if = {
                limit = {
                    $day_1_of_main_loop$ = yes
                }
                root = {
                    change_variable = {
                        name = lroai_building_conscription_center_total
                        add = prev.level
                    }
                }
            }
        }
    }
    
    # We need to ensure that collected data variabled of selected building is set even if there are no such buildings.
    # We also need to make them temporary because if cycle breaks hard enough they'll be just left in memory.
    if = {
        limit = {
            $day_1_of_main_loop$ = yes
        }
        if = {
            limit = {
                has_variable = lroai_building_type_1_collected_data
            }
            lroai_calculate_percent_of_building_type_levels_without_shortage = {
                id = 1
            }
        }
        set_variable = {
            name = lroai_building_type_1_collected_data
            value = {
                if = {
                    limit = {
                        has_variable = lroai_building_type_1_collected_data
                    }
                    value = var:lroai_building_type_1_collected_data
                }
                else = {
                    value = 0.99
                }
            }
            days = lroai_days_to_keep_short_variables
        }
        if = {
            limit = {
                has_variable = lroai_building_type_3_collected_data
            }
            lroai_calculate_percent_of_building_type_levels_without_shortage = {
                id = 3
            }
        }
        set_variable = {
            name = lroai_building_type_3_collected_data
            value = {
                if = {
                    limit = {
                        has_variable = lroai_building_type_3_collected_data
                    }
                    value = var:lroai_building_type_3_collected_data
                }
                else = {
                    value = 0.99
                }
            }
            days = lroai_days_to_keep_short_variables
        }
        if = {
            limit = {
                has_variable = lroai_building_type_5_collected_data
            }
            lroai_calculate_percent_of_building_type_levels_without_shortage = {
                id = 5
            }
        }
        set_variable = {
            name = lroai_building_type_5_collected_data
            value = {
                if = {
                    limit = {
                        has_variable = lroai_building_type_5_collected_data
                    }
                    value = var:lroai_building_type_5_collected_data
                }
                else = {
                    value = 0.99
                }
            }
            days = 3lroai_days_to_keep_short_variables
        }
    }

    # Garbage collection; we don't need consription center expenses anywhere else
    remove_local_variable = lroai_building_conscription_center_expenses
    
    # We always pretend wage level is medium
    if = {
        limit = {
            NOT = {
                modifier:country_government_wages_mult = 0.00
            }
        }
        change_local_variable = {
            name = lroai_building_university_expenses
            divide = {
                value = 1
                add = {
                    value = modifier:country_government_wages_mult
                    multiply = 0.95
                }
            }
        }
    }
    if = {
        limit = {
            NOT = {
                modifier:country_military_wages_mult = 0.00
            }
        }
        change_local_variable = {
            name = lroai_building_barracks_expenses
            divide = {
                value = 1
                add = {
                    value = modifier:country_military_wages_mult
                    multiply = 0.60
                }
            }
        }
        change_local_variable = {
            name = lroai_building_naval_base_expenses
            divide = {
                value = 1
                add = {
                    value = modifier:country_military_wages_mult
                    multiply = 0.60
                }
            }
        }
    }

    lroai_add_local_variable_to_array_variable = {
        input = lroai_building_university_expenses
        output = lroai_building_university_spending
        elements = lroai_weeks_in_iteration
        zero = 2
        cleanup = yes
    }
    lroai_add_local_variable_to_array_variable = {
        input = lroai_building_barracks_expenses
        output = lroai_building_barracks_spending
        elements = lroai_weeks_in_iteration
        zero = 2
        cleanup = yes
    }
    lroai_add_local_variable_to_array_variable = {
        input = lroai_building_naval_base_expenses
        output = lroai_building_naval_base_spending
        elements = lroai_weeks_in_iteration
        zero = 2
        cleanup = yes
    }
}

# Track how many iterations of weekly loop were performed in this main iteration and schedule next if needed
lroai_count_and_schedule_iterations_of_weekly_loop = {
    if = {
        limit = {
            $day_1_of_main_loop$ = yes
        }
        remove_variable = lroai_performed_iterations_of_weekly_loop
    }

    # Track number of performed weekly loop iterations and schedule next if it's not last week of main iteration
    lroai_add_to_variable = {
        name = lroai_performed_iterations_of_weekly_loop
        value = 1
    }
    if = {
        limit = {
            var:lroai_performed_iterations_of_weekly_loop < lroai_weeks_in_iteration
        }
        trigger_event = {
            id = lroai_weekly_loop_events.1
            days = 7
        }
    }
}


# Budget surplus is calculated as a treasury delta. For any additional values previous week data is used
# because treasury delta is a byproduct of previous week income and expenses and not this week ones.
lroai_calculate_building_construction_sector_expenses_per_point = {


    set_variable = {
        name = lroai_previous_building_construction_sector_expenses
        value = 1200
    }

    if = { limit = { NOT = {has_variable = lroai_previous_cost_per_construction_point} }
        set_variable = {
            name = lroai_previous_cost_per_construction_point
            value = 1200
        }
     }

    set_variable = {
        name = lroai_temporary_cost_per_construction_point
        value = {
            value = local_var:lroai_building_construction_sector_expenses
            divide = lroai_usage_of_construction_points_value
        }
    }
    set_variable = {
        name = lroai_temporary_construction_sector_expenses
        value = local_var:lroai_building_construction_sector_expenses
    }
    if = { limit = {construction_queue_num_queued_government_levels = 0}
            #do nothing
        }
    else_if = {
        limit = {var:lroai_temporary_cost_per_construction_point > var:lroai_previous_cost_per_construction_point}

        set_variable = {
            name = lroai_previous_cost_per_construction_point
            value = {
                value = var:lroai_previous_cost_per_construction_point
                multiply = 0.9
                add = {
                    value = var:lroai_temporary_cost_per_construction_point
                    multiply = 0.1
                }
            }
        }
    }
    else = {
        set_variable = {
            name = lroai_previous_cost_per_construction_point
            value = {
                value = var:lroai_previous_cost_per_construction_point
                multiply = 0.99
                add = {
                    value = var:lroai_temporary_cost_per_construction_point
                    multiply = 0.01
                }
            }
        }
    }

}

lroai_clear_weekly_loop_variables = {
    remove_variable = lroai_building_university_spending
    remove_variable = lroai_building_barracks_spending
    remove_variable = lroai_building_naval_base_spending

    remove_variable = lroai_previous_building_construction_sector_expenses
}

lroai_clear_weekly_loop_local_variables = {
    remove_local_variable = lroai_building_construction_sector_expenses
}